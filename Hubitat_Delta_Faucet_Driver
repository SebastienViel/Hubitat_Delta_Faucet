/*

Copyright 2023 - SebastienViel

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-------------------------------------------

This driver was written with the help of OpenAI, tomw and the hubitat community based on the following script from veelar:
https://gist.github.com/velaar/4e18a200c1db7b06109a3fd840838684

Change history:

1.0 - SebastienViel - Initial release.
1.1 - SebastienViel - Removed "Driver" from the driver name.
1.2 - TomW - Added option to dispence a specific quantity and a query for information (logged for now) and other fixes.
1.3 - SebastienViel - Added sending events with on/off/dispense and fixed logging and definitions
1.4 - TomW & SebastienViel - Multiple updates
1.5 - SebastienViel - Updated some of the labels

*/
import groovy.json.JsonSlurper
import groovy.transform.Field

metadata
{
    definition(
        name: "Delta VoiceIQ Faucet",
        namespace: "SebastienViel",
        author: "SÃ©bastien Viel and TomW",
        importUrl: "https://raw.githubusercontent.com/SebastienViel/Hubitat_Delta_Faucet/main/Hubitat_Delta_Faucet_Driver"
        )
    {
        capability "Switch"
        
        command "saveToken", ["token"]
        command "dispense_mL", ["mL_toDispense"]
        command "queryUsageReport", [[name: "Time interval", title: "Query Usage Report", type:"ENUM", constraints: knownTimePeriods().keySet()]]
        //command "queryUsageReport", [[name: "Time interval", type:"ENUM", title: "Query Usage Report", options: [0:"daily",1:"weekly",2:"monthly",3:"yearly"]]]
        
     }
}

preferences
{
    input("delta_device_id", "text", title: "Delta Device ID", description: "Enter Delta Device ID", defaultValue: "")
    input(name: "logEnable", type: "bool", title: "Enable debug logging", defaultValue: true)
}

def installed() { log.debug "installed" }

def updated() { log.debug "updated" }

def on() {
    toggleWater("on")
}
def off() {
    toggleWater("off")
}

def knownTimePeriods()
{
    def periods = [ daily: 0, weekly: 1, monthly: 2, yearly: 3 ]
    
    return periods
}

def queryUsageReport(interval)
{
    interval = knownTimePeriods()?.getAt(interval)
    
    try
    {
        def response = httpExec("GET", "UsageReport?deviceId=${delta_device_id}&interval=${interval}")
        
        if(response?.status?.toInteger() == 200)
        {
            log.info "Usage Report = ${response.data}"
        }
        else { log.error "Usage Report ${interval} failed: ${response.status}" }
    }
    catch(Exception e)
    {
        log.error "Error Usage Report: ${e.message}"
    }
}

def saveToken(token)
{
    device.updateDataValue("token", token)
}

def currentToken()
{
    return device.getDataValue("token")
}

private toggleWater(String toggle)
{    
    try
    {
        def response = httpExec("POST", "toggleWater?deviceId=${delta_device_id}&toggle=${toggle}")

        if (logEnable){log.debug response.status}
        if (logEnable){log.debug response.data}
        
        if(response?.status?.toInteger() == 200)
        {
            sendEvent(name: "switch", value: toggle, descriptionText: "${device.displayName} is ${toggle}")
            if (logEnable) { log.debug "Toggle water ${toggle} successful" }
        }
        else { log.error "Toggle water ${toggle} failed: ${response.status}" }
    }
    catch(Exception e)
    {
        log.error "Error toggling water: ${e.message}"
    }
}

private dispense_mL(mL_toDispense)
{   
    try
    {
        def response = httpExec("POST", "dispense?deviceId=${delta_device_id}&milliliters=${mL_toDispense}")

            if (logEnable){log.debug response.status}
            if (logEnable){log.debug response.data}
        
        if(response?.status?.toInteger() == 200)
        {
            if (logEnabled){ log.debug "Dispense mL ${mL_toDispense} successful" }
            sendEvent(name: "switch", value: "on", descriptionText: "${device.displayName} is on")
        }
        else { log.error "Dispense mL failed: ${response.status}" }
    }
    catch(Exception e)
    {
        log.error "Error dispensing water: ${e.message}"
    }
    sendEvent(name: "switch", value: "off", descriptionText: "${device.displayName} is off")
}

def httpExec(operation, String path)
{
    def result = null
    
    def httpClosure = 
    { resp ->
        result = resp
    }
    
    def httpOp
    
    switch(operation)
    {
        case "POST":
            httpOp = this.delegate.&httpPost
            break
        case "GET":
            httpOp = this.delegate.&httpGet
            break
    }
    
    def deltaToken = "Bearer ${currentToken()}"
    def apiUrl = "https://device.legacy.deltafaucet.com/api/device/" + path
    def headers =
        [
            'Authorization': deltaToken, 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
            'Referer': 'https://device.legacy.deltafaucet.com/'
        ]
    
    httpOp(uri: apiUrl, headers: headers, httpClosure)
    
    return result
}
